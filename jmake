#!/usr/bin/env bash
# jmake - simple Java project helper
# Usage: ./jmake [command]
# Commands:
#   run   - run the main class (Axiom)
#   jar   - build executable jar (axiom.jar)
#   all   - compile and run
#   clean - remove compiled classes and jar
#   (no arg) - compile sources

usage() {
  cat <<EOF
${0##*/} - simple Java project helper

Usage: ${0##*/} [command]

Commands:
  run       Compile and run the main class (${MAIN_CLASS})
  jar       Build executable jar (${JAR_NAME})
  all       Compile and run (alias for run)
  clean     Remove compiled classes and the jar
  help      Show this help message
  (no arg)  Compile sources only

Examples:
  ${0##*/}            # compile
  ${0##*/} run        # compile and run
  ${0##*/} jar        # create axiom.jar
  ${0##*/} clean      # remove build artifacts
EOF
}

set -euo pipefail
ROOT_DIR="$(cd "$(dirname "$0")" && pwd)"
JAVA_OUT_DIR="$ROOT_DIR/java"
JAR_NAME="axiom.jar"
MAIN_CLASS="Axiom"

compile() {
  echo "Compiling Java sources..."
  mkdir -p "$JAVA_OUT_DIR"
  # find and compile all java files
  javac -d "$JAVA_OUT_DIR" $(find "$ROOT_DIR" -name "*.java")
  echo "Compiled to $JAVA_OUT_DIR"
}

build_jar() {
  compile
  echo "Building $JAR_NAME (Main-Class: $MAIN_CLASS)..."
  # create manifest on the fly and package
  jar --create --file "$ROOT_DIR/$JAR_NAME" --manifest <(printf "Main-Class: %s\n" "$MAIN_CLASS") -C "$JAVA_OUT_DIR" .
  echo "Created $JAR_NAME"
}

run_main() {
  compile
  echo "Running $MAIN_CLASS..."
  java -cp "$JAVA_OUT_DIR" "$MAIN_CLASS"
}

clean() {
  echo "Cleaning compiled classes and $JAR_NAME..."
  rm -rf "$JAVA_OUT_DIR"
  rm -f "$ROOT_DIR/$JAR_NAME"
  echo "Clean complete."
}

case "${1-}" in
  help|-h|--help)
    usage
    ;;
  run)
    run_main
    ;;
  jar)
    build_jar
    ;;
  all)
    run_main
    ;;
  clean)
    clean
    ;;
  "" )
    compile
    ;;
  *)
    echo "Usage: ${0##*/} [run|jar|all|clean|help]"
    exit 1
    ;;
esac
